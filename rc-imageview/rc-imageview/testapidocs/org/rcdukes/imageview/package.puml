@startuml

    namespace org.rcdukes.imageview {

        class TestDebugImageServer [[TestDebugImageServer.html]] {
            +startImageServer(): void
            +testDebugImageServerStart(): void
            +testTestImage(): void
            +testMJpegStream(): void
            +testOpenCV(): void
        }

        class TestSuite [[TestSuite.html]] {
            {static} +isTravis(): boolean
        }

        class OpenCVBasedTest [[OpenCVBasedTest.html]] {
            {static} +setup(): void
        }

        class TestVideoRecorder [[TestVideoRecorder.html]] {
            {static} +debug: boolean
            +testVideoRecorder(): void
            +testVideoRecorders(): void
            +testVideoInfoGraphDatabase(): void
        }

        class DebugImageServer [[DebugImageServer.html]] {
            {static} +SERVE_TEST_IMAGES: boolean
            {static} +imageFormat: DebugImageServer.ImageFormat
            {static} +exts: String[]
            {static} +contentTypes: String[]
            {static} +fps: double
            #server: HttpServer
            +start(Future<Void>): void
            #receiveSimulatorImage(Message<String>): void
            +getNextImage(ImageCollector.ImageType): Image
            #shootPhoto(): void
            +sendImage(HttpServerRequest): void
            +sendSingleImage(HttpServerRequest, ImageCollector.ImageType): void
            +sendImageBytes(HttpServerRequest, byte[]): void
            +recordFrame(Mat, ImageCollector.ImageType): void
        }

        enum org.rcdukes.imageview.DebugImageServer.ImageFormat [[DebugImageServer.ImageFormat.html]] {
            {static} +png
            {static} +jpg
        }

        class MJpegDecoder [[MJpegDecoder.html]] {
            {static} #LOG: Logger
            {static} +debug: boolean
            +MJpegDecoder(MJpegHandler)
            +onCompleted(): void
            +onError(Throwable): void
            +onNext(byte[]): void
            +open(int): void
            +close(): void
            +onNext(Object): void
        }

        class MultipartStreamer [[MultipartStreamer.html]] {
            +MultipartStreamer(DebugImageServer, HttpServerResponse, ImageCollector.ImageType)
            +streamNextImage(): void
            +writeMultiPartFrame(Buffer): void
            +preamble(): void
            +run(): void
        }

        class MJpegHandler [[MJpegHandler.html]] {
            +MJpegHandler(String)
            +MJpegHandler()
            +getInputStream(): BodyDeferringAsyncHandler.BodyDeferringInputStream
            +open(int): MJpegDecoder
            +close(): void
        }

        OpenCVBasedTest <|-- TestDebugImageServer

        OpenCVBasedTest <|-- TestVideoRecorder

        abstract class org.rcdukes.common.DukesVerticle
        org.rcdukes.common.DukesVerticle <|-- DebugImageServer

        DebugImageServer +-- org.rcdukes.imageview.DebugImageServer.ImageFormat

        abstract class rx.Subscriber<T>
        rx.Subscriber <|-- MJpegDecoder

        interface java.lang.Runnable {
            {abstract} +run(): void
        }
        java.lang.Runnable <|.. MultipartStreamer

    }


    center footer UMLDoclet 1.1.4, PlantUML 1.2019.05
@enduml
