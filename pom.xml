<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>nl.vaneijndhoven</groupId>
	<artifactId>dukes</artifactId>
	<version>0.0.2</version>
	<packaging>pom</packaging>
	<name>rc-dukes parent pom</name>
	<description>definition of common generic maven aspects of the modules of the dukes projects</description>
	<url>https://github.com/${github.owner}/${github.project}</url>
	<developers>
		<developer>
			<id>timve</id>
			<name>Tim van Eijndhoven</name>
			<organization>JPoint B.V.</organization>
			<organizationUrl>https://www.jpoint.nl/</organizationUrl>
		</developer>
		<developer>
			<id>bertjan</id>
			<name>Bert Jan Schrijver</name>
			<organization>Open Value</organization>
			<organizationUrl>https://openvalue.group/</organizationUrl>
		</developer>
		<developer>
			<id>wf</id>
			<name>Wolfgang Fahl</name>
			<organization>BITPlan GmbH</organization>
			<organizationUrl>http://www.bitplan.com</organizationUrl>
		</developer>
	</developers>
	<scm>
		<connection>scm:git:https://github.com/${github.owner}</connection>
		<developerConnection>scm:git:https://github.com/${github.owner}</developerConnection>
		<url>https://github.com/${github.owner}</url>
	</scm>
	<issueManagement>
		<url>https://github.com/${github.owner}/${github.project}/issues</url>
		<system>GitHub</system>
	</issueManagement>
	<properties>
		<!-- standard Java Version -->
		<java.version>1.8</java.version>

		<!-- also used by README generator script -->
		<github.project>dukes</github.project>
		<github.owner>rc-dukes</github.owner>

		<github.site.path>${project.version}</github.site.path>

		<!-- https://stackoverflow.com/questions/15886209/maven-is-not-working-in-java-8-when-javadoc-tags-are-incomplete -->
		<javadoc.opts>-Xdoclint:none</javadoc.opts>

		<!-- Version numbers -->
		<!-- https://mvnrepository.com/artifact/com.mycila/license-maven-plugin (latest: 3.0 Aug 2016) we purposely use an older version -->
		<com.mycila.maven-license-plugin.version>1.9.0</com.mycila.maven-license-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.sonatype.plugins/nexus-staging-maven-plugin -->
		<nexus-staging-maven-plugin.version>1.6.8</nexus-staging-maven-plugin.version>
		<!-- https://mvnrepository.com/artifact/com.akathist.maven.plugins.launch4j/launch4j-maven-plugin -->
		<launch4j-maven-plugin.version>1.7.22</launch4j-maven-plugin.version>
		<!-- Maven Plugins https://mvnrepository.com/artifact/org.apache.maven.plugins -->
		<maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
		<maven-surefire-plugin.version>2.22.0</maven-surefire-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.jacoco/jacoco-maven-plugin -->
		<maven-jacoco-plugin.version>0.8.4</maven-jacoco-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->
		<maven-jar-plugin.version>3.1.0</maven-jar-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-antrun-plugin -->
		<maven-antrun-plugin.version>1.8</maven-antrun-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-assembly-plugin -->
		<maven-assembly-plugin.version>3.1.0</maven-assembly-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-shade-plugin -->
		<maven-shade-plugin.version>3.1.1</maven-shade-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-source-plugin -->
		<maven-source-plugin.version>3.0.1</maven-source-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-javadoc-plugin -->
		<maven-javadoc-plugin.version>3.0.1</maven-javadoc-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-gpg-plugin -->
		<maven-gpg-plugin.version>1.6</maven-gpg-plugin.version>
		<!-- https://stackoverflow.com/a/35673586/1497139 -->
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-site-plugin -->
		<maven-site-plugin.version>3.7.1</maven-site-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-project-info-reports-plugin -->
		<maven-project-info-reports-plugin.version>2.9</maven-project-info-reports-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-report-plugin -->
		<!-- https://github.com/BITPlan/com.bitplan.pom/issues/7 -->
		<maven-surefire-report-plugin.version>${maven-surefire-plugin.version}</maven-surefire-report-plugin.version>
		<!--https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jxr-plugin -->
		<maven-jxr-plugin.version>2.5</maven-jxr-plugin.version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->
		<maven-jar-plugin-version>3.1.2</maven-jar-plugin-version>
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-checkstyle-plugin -->
		<maven-checkstyle-plugin.version>3.0.0</maven-checkstyle-plugin.version>
		<!-- https://github.com/github/maven-plugins -->
		<site-maven-plugin.version>0.12</site-maven-plugin.version>

		<!-- versions of commonly used components -->

		<vertx.version>3.8.4</vertx.version>
		<hazelcast.version>3.12.5</hazelcast.version>
		<logback-classic.version>1.1.5</logback-classic.version>
		<!-- open cv version 2019-06: 2.4.6.1 which would be available in maven central 3.3.0 / 3.4.3 has to be installed e.g. from lib directory (see below) -->
		<opencv.version>3.4.3</opencv.version>
		<opencv.lib>343</opencv.lib>
		<junit.version>4.12</junit.version>
		<commons-io.version>2.6</commons-io.version>
		<!-- Gremlin/Tinkerpop -->
		<tinkerpop.version>3.4.4</tinkerpop.version>
		<!-- args4j command line parser -->
		<args4j.version>2.33</args4j.version>
		<!-- asynchttpclient -->
		<asynchttpclient.version>2.10.4</asynchttpclient.version>
		<rxjava-string.version>1.1.1</rxjava-string.version>
		<commonslang3.version>3.9</commonslang3.version>
		<!-- other settings -->
		<main_dir>${project.parent.relativePath}/..</main_dir>
		<!-- fix encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<!-- https://mvnrepository.com/artifact/org.opencv/opencv-jar -->
			<dependency>
				<groupId>org.opencv</groupId>
				<artifactId>opencv-jar</artifactId>
				<version>${opencv.version}</version>
			</dependency>

			<dependency>
				<groupId>com.hazelcast</groupId>
				<artifactId>hazelcast</artifactId>
				<version>${hazelcast.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-core</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-rx-java</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-hazelcast</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-web</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/io.vertx/vertx-tcp-eventbus-bridge -->
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-tcp-eventbus-bridge</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/io.vertx/vertx-unit -->
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-unit</artifactId>
				<version>${vertx.version}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${logback-classic.version}</version>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.apache.tinkerpop/gremlin-core -->
			<dependency>
				<groupId>org.apache.tinkerpop</groupId>
				<artifactId>gremlin-core</artifactId>
				<version>${tinkerpop.version}</version>
			</dependency>
			<!-- in memory graph database -->
			<dependency>
				<groupId>org.apache.tinkerpop</groupId>
				<artifactId>tinkergraph-gremlin</artifactId>
				<version>${tinkerpop.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/args4j/args4j -->
			<dependency>
				<groupId>args4j</groupId>
				<artifactId>args4j</artifactId>
				<version>${args4j.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.asynchttpclient/async-http-client-extras-rxjava2 -->
			<dependency>
				<groupId>org.asynchttpclient</groupId>
				<artifactId>async-http-client-extras-rxjava2</artifactId>
				<version>${asynchttpclient.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/io.reactivex/rxjava-string -->
			<dependency>
			    <groupId>io.reactivex</groupId>
			    <artifactId>rxjava-string</artifactId>
			    <version>${rxjava-string.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commonslang3.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
			<dependency>
			    <groupId>com.google.code.gson</groupId>
			    <artifactId>gson</artifactId>
			    <version>2.8.6</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/uk.org.lidalia/sysout-over-slf4j -->
			<dependency>
			    <groupId>uk.org.lidalia</groupId>
			    <artifactId>sysout-over-slf4j</artifactId>
			    <version>1.0.2</version>
			</dependency>
		</dependencies>

	</dependencyManagement>

	<modules>
		<module>rc-car</module>
		<module>rc-server</module>
		<module>rc-webcontrol</module>
		<module>rc-roi</module>
		<module>rc-camera-matrix</module>
		<module>rc-detect</module>
		<module>rc-remotecar</module>
		<module>rc-geometry</module>
		<module>rc-watchdog</module>
		<module>rc-action</module>
		<module>rc-imageview</module>
		<module>rc-app</module>
		<module>rc-common</module>
		<module>rc-drivecontrol</module>
		<!-- pseudo module for coverage -->
		<module>rc-coverage</module>
	</modules>
	<!-- see http://wiki.bitplan.com/index.php/Multi-Module_Maven_with_github_pages -->
	<distributionManagement>
		<site>
			<!-- Do mvn site site:stage -DstagingDirectory=/tmp/path first, then manually add/push to the gh-pages branch on GitHub) -->
			<id>${project.artifactId}-site</id>
			<name>${github.owner} ${project.artifactId} ${project.version} GitHub Pages</name>
			<url>https://${github.owner}.github.io/${project.artifactId}</url>
		</site>
	</distributionManagement>
	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<!-- see https://stackoverflow.com/questions/10483180/maven-what-is-pluginmanagement plugins that child poms might use -->
		<pluginManagement>
			<plugins>
				<!-- potentially share test jars -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin-version}</version>
					<executions>
						<execution>
							<goals>
								<goal>test-jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- git hub site plugin https://github.com/github/maven-plugins configured for fixing the multi-module issue https://github.com/github/maven-plugins/issues/22 -->
				<plugin>
					<groupId>com.github.github</groupId>
					<artifactId>site-maven-plugin</artifactId>
					<version>${site-maven-plugin.version}</version>
					<configuration>
						<message>Creating site for ${github.owner} ${github.project} ${project.version} with url ${project.url}</message>
						<repositoryName>${github.project}</repositoryName>
						<!-- github repo name -->
						<repositoryOwner>${github.owner}</repositoryOwner>
						<!-- github username -->
						<path>${github.site.path}</path>
						<merge>true</merge>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>site</goal>
							</goals>
							<phase>site</phase>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<!-- http://code.mycila.com/license-maven-plugin/ -->
				<groupId>com.mycila.maven-license-plugin</groupId>
				<artifactId>maven-license-plugin</artifactId>
				<version>${com.mycila.maven-license-plugin.version}</version>
				<configuration>
					<header>src/etc/header.txt</header>
					<strictCheck>true</strictCheck>
					<includes>
						<include>src/**/*.java</include>
					</includes>
				</configuration>
			</plugin>
			<!-- Maven plugins -->
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<!-- surefire (test) plugin https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					<excludes>
						<!-- JUnit4 TestSuites -->
						<exclude>**/TestSuite.java</exclude>
						<exclude>**/TestDebug.java</exclude>
					</excludes>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
				</configuration>
			</plugin>
			<!-- source plugin -->
			<plugin>
				<!-- see http://central.sonatype.org/pages/apache-maven.html Javadoc and Sources Attachments To get Javadoc and Source jar files generated, you have to configure the javadoc and source Maven plugins. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>${maven-source-plugin.version}</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- https://maven.apache.org/plugins/maven-site-plugin/ -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>${maven-site-plugin.version}</version>
				<!-- do not deploy (we need to get the result to gh-pages in the end) -->
				<configuration>
					<skipDeploy>true</skipDeploy>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<format>xml</format>
					<maxmem>256m</maxmem>
					<!-- aggregated reports for multi-module projects -->
					<aggregate>true</aggregate>
				</configuration>
			</plugin>
			<!-- https://github.com/trautonen/coveralls-maven-plugin -->
			<plugin>
				<groupId>org.eluder.coveralls</groupId>
				<artifactId>coveralls-maven-plugin</artifactId>
				<version>4.3.0</version>
			</plugin>
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-project-info-reports-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>${maven-project-info-reports-plugin.version}</version>
			</plugin>
			<!-- GPG Signed Components The Maven GPG plugin is used to sign the components with the following configuration. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-gpg-plugin</artifactId>
				<version>${maven-gpg-plugin.version}</version>
				<executions>
					<execution>
						<id>sign-artifacts</id>
						<phase>verify</phase>
						<goals>
							<goal>sign</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- according to : http://central.sonatype.org/pages/apache-maven.html Nexus Staging Maven Plugin for Deployment and Release The Nexus Staging Maven Plugin is the recommended way to deploy your components to OSSRH and release them to the Central
			Repository. To configure it simply add the plugin to your Maven pom.xml. -->
			<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<version>${nexus-staging-maven-plugin.version}</version>
				<extensions>true</extensions>
				<configuration>
					<serverId>ossrh</serverId>
					<nexusUrl>https://oss.sonatype.org/</nexusUrl>
					<!-- set to true for automation -->
					<autoReleaseAfterClose>false</autoReleaseAfterClose>
				</configuration>
			</plugin>

			<!-- how to fake a maven dependency to be resolved locally https://stackoverflow.com/a/31023523/1497139 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>2.5.2</version>
				<executions>
					<execution>
						<id>install-external</id>
						<phase>clean</phase>
						<configuration>
							<file>${main_dir}/lib/opencv-${opencv.lib}.jar</file>
							<repositoryLayout>default</repositoryLayout>
							<groupId>org.opencv</groupId>
							<artifactId>opencv-jar</artifactId>
							<version>${opencv.version}</version>
							<packaging>jar</packaging>
							<generatePom>true</generatePom>
						</configuration>
						<goals>
							<goal>install-file</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven-javadoc-plugin.version}</version>
				<configuration>
					<additionalparam>${javadoc.opts}</additionalparam>
					<!-- <additionalOptions>${javadoc.opts}</additionalOptions> -->
					<additionalJOption>${javadoc.opts}</additionalJOption>
					<overview>${basedir}\src\main\java\overview.html</overview>
					<!-- <verbose>true</verbose> -->
					<quiet>true</quiet>
					<excludePackageNames>stormbots</excludePackageNames>
					<doclet>nl.talsmasoftware.umldoclet.UMLDoclet</doclet>
					<docletArtifact>
						<groupId>nl.talsmasoftware</groupId>
						<artifactId>umldoclet</artifactId>
						<!-- Java8 compatible version -->
						<version>1.1.4</version>
					</docletArtifact>
					<!-- <additionalOptions> <additionalOption>...</additionalOption> </additionalOptions> -->
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration></configuration>
					</execution>
					<execution>
						<id>aggregate</id>
						<goals>
							<goal>aggregate</goal>
						</goals>
						<phase>site</phase>
						<configuration>
							<!-- Specific configuration for the aggregate report -->
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<!-- https://issues.apache.org/jira/browse/MDEPLOY-177 https://stackoverflow.com/questions/33318793/how-to-fix-or-workaround-wagon-bug -->
		<extensions>
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ssh</artifactId>
				<version>2.10</version>
			</extension>
		</extensions>
	</build>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>${maven-project-info-reports-plugin.version}</version>
				<configuration>
					<dependencyDetailsEnabled>true</dependencyDetailsEnabled>
					<dependencyLocationsEnabled>true</dependencyLocationsEnabled>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven-javadoc-plugin.version}</version>
				<configuration>
					<overview>${basedir}\src\main\java\overview.html</overview>
					<!--<verbose>true</verbose> -->
					<quiet>true</quiet>
					<additionalJOption>${javadoc.opts}</additionalJOption>
					<doclet>nl.talsmasoftware.umldoclet.UMLDoclet</doclet>
					<docletArtifact>
						<groupId>nl.talsmasoftware</groupId>
						<artifactId>umldoclet</artifactId>
						<!-- Java8 compatible version -->
						<version>1.1.4</version>
					</docletArtifact>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${maven-surefire-report-plugin.version}</version>
				<!-- https://stackoverflow.com/questions/1274523/maven-surefire-reporting-plugin-configuration -->
				<configuration>
					<aggregate>true</aggregate>
					<!--also set this to link to generated source reports -->
					<linkXRef>true</linkXRef>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>${maven-jxr-plugin.version}</version>
				<configuration>
					<aggregate>true</aggregate>
				</configuration>
			</plugin>
			<!-- https://mvnrepository.com/artifact/org.jacoco/jacoco-maven-plugin -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${maven-jacoco-plugin.version}</version>
			</plugin>
		</plugins>
	</reporting>
	<profiles>
		<profile>
			<id>jacoco</id>
			<activation>
				<property>
					<name>jacoco</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- jacoco code coverage https://mvnrepository.com/artifact/org.jacoco/jacoco-maven-plugin https://www.petrikainulainen.net/programming/maven/creating-code-coverage-reports-for-unit-and-integration-tests-with-the-jacoco-maven-plugin/ -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${maven-jacoco-plugin.version}</version>
						<executions>
							<!-- Prepares the property pointing to the JaCoCo runtime agent which is passed as VM argument when Maven the Surefire plugin is executed. -->
							<execution>
								<id>prepare-agent</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<!-- Sets the name of the property containing the settings for JaCoCo runtime agent. -->
									<propertyName>surefireArgLine</propertyName>
								</configuration>
							</execution>
							<!-- Ensures that the code coverage report for unit tests is created after unit tests have been run. -->
							<execution>
								<id>post-unit-test</id>
								<phase>test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
									<!-- Sets the output directory for the code coverage report. -->
									<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- fat jar creation with assembly plugin -->
		<profile>
			<id>createAssembly</id>
			<!-- set <createAssembly>true</createAssembly> and <assemblyMainClass>a.b.c</assemblyMainClass> to activate -->
			<activation>
				<property>
					<name>createAssembly</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- jar creation -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<version>${maven-jar-plugin.version}</version>
						<configuration>
							<archive>
								<manifest>
									<addClasspath>true</addClasspath>
									<mainClass>${assemblyMainClass}</mainClass>
								</manifest>
							</archive>
						</configuration>
					</plugin>
					<!-- executable jar with dependencies see http://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven run with mvn clean compile assembly:single -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin.version}</version>
						<configuration>
							<archive>
								<manifest>
									<mainClass>${assemblyMainClass}</mainClass>
								</manifest>
							</archive>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
						</configuration>
						<executions>
							<execution>
								<id>make-assembly</id>
								<!-- this is used for inheritance merges -->
								<phase>package</phase>
								<!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
